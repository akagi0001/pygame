=====================
Styling Documentation
=====================

Sphinx styling is done trough html templates, css templates, css files and some configuration values in conf.py.
The styles are known as 'themes'; Sphinx offers a handful of them and more are available as packages in pypi.

When cocos switched to the Sphinx toolchain the requeriments were: rendering enought pretty, some easy color customization, no digging into the deepths of Sphinx for easy maintenance. The stock theme 'classic' was chosen as fulfilling those requeriments, and was customized only by adjusting the 'html_theme_options' in config.py; this were the first, greenish, sphinx docs.

A sketch view for how this works is:
	- When Sphinx builds the docs with the theme 'classic', it combines its templates with the 'html_theme_options' and produces three .css files: basic.css, classic.css and pygments.css; they control the documentation styling.
	- pygments.css only controls Syntax Highlighting in code blocks, basic.css provides some common styling shared between many themes, classic.css imports basic and redefines / adds CSS rules as needed by the classic look.
	- The only .css files directly loaded in the HTML are classic.css and pygments.css     

	
Going to cocos 0.6.4 a change in the color palette was desired, and a bluish one looked as good as any other. Using an inspector in the browser to live change color values and then retrofitting to some colors in 'html_theme_options' was easy enought to specify a consistent bluish theme, except for a few details. It was easy enought to locate the fragments in the .css that needed to change, but there wasn't a python parameter to adjust them.

A way to solve this could have been to understand Sphinx custom themes, copy and modify theme classic to expose the missing parts. Too much time now, and probabbly again in one or two years more, when time to refresh the look will come.

A simpler workaround was adopted for the bluish theme: Theres a way to tell sphinx to add an arbitrary .css to the mix, to be loaded after classic.css. The later ensures that when all other things are equals, the rule in the arbitrary .css will win over the one in classic.css. So a cocos.css was added to customize the additional few rules.

There was some boilerplate involved in convincing Sphinx to add our cocos.css, ( this http://stackoverflow.com/questions/23462494/how-to-add-custom-css-file  helped ).

So the commit introducing the bluish variation on 'classic' theme consist of three parts:
	- the bulk of color changes, by editing colors in config.py's 'html_theme_options'
	- addition of cocos.css to change some colors not reachable in first part
	- boilerplate changes so that cocos.css will be used as described above by sphinx
	
Sphinx 1.4.1 was used for the bluish work.

To keep cocos.css small across a number of style changes it would be better to:
	- disable cocos.css styles by commenting out all his content (CSS multiline comment is /* ... */)
	- aproach the desired new style editing the 'html_theme_options' in conf.py
	- using the browser inspector and comenting in and out parts of cocos.css determine changes needed in cocos.css
	- adjust cocos.css, delete al unused parts to not grow crust.
